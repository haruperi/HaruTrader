# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Development Guidelines

1. Always activate the virtual environment before working on the project
2. Add new dependencies to requirements.txt
3. Keep code organized and well-documented
4. Follow PEP 8 style guidelines for Python code
5. Keep your code DRY (Dont Repeat Yourself)

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Always implement proper logging in all modules following these guidelines:
  1. Import the logger at the top of each module: `from app.utils import get_logger`
  2. Create a module-specific logger: `logger = get_logger(__name__)`
  3. Use appropriate log levels:
     - DEBUG: Detailed information for debugging
     - INFO: Confirmation that things are working as expected
     - WARNING: Indication that something unexpected happened but the application is still working
     - ERROR: Due to a more serious problem, the application couldn't perform a function
     - CRITICAL: A serious error indicating the application may be unable to continue running
  4. Include context in log messages (e.g., function parameters, return values, object states)
  5. Log the start and end of important operations
  6. Log all exceptions with traceback information using `logger.exception()` or `logger.error(exc_info=True)`
  7. Use structured logging for machine-parseable logs when appropriate
- Implement defensive programming to handle circular imports:
  1. Use try/except blocks for imports that might cause circular dependencies
  2. Implement fallback mechanisms for critical utilities like logging
  3. Follow the module hierarchy defined in docs/dependency_management.md
  4. Use late imports inside functions when necessary
  5. Use dependency injection to pass higher-level components to lower-level ones
  6. Test imports thoroughly before committing code

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Current Task: Project Reorganization
Reorganizing the project structure to follow best practices.

### Plan:
[X] Move all test files from examples to tests directory
[X] Delete examples directory
[X] Delete scripts directory
[X] Update .cursorrules with testing rules
[X] Update tests/README.md to reflect the changes
[X] Consolidate notification functionality
[X] Delete all log files for a fresh start

### Progress:
✓ Moved all test files from examples to tests directory:
  - Renamed simple_logger_test.py to test_logger.py
  - Copied test_market_data.py, test_fundamental_data.py, and test_market_data_mock.py
  - Copied README.md

✓ Deleted examples directory

✓ Deleted scripts directory

✓ Updated .cursorrules with testing rules:
  - Added guidelines for test organization
  - Added naming conventions for test files, classes, and methods

✓ Updated tests/README.md:
  - Updated file paths and commands
  - Added information about test organization and running tests

✓ Consolidated notification functionality:
  - Moved convenience functions from app/utils/notify.py to app/core/notification.py
  - Deleted app/utils/notify.py and app/utils/notification.py
  - Updated imports in app/trader/trade.py

✓ Deleted all log files for a fresh start

Next: Continue implementing the remaining methods in the trade.py file:
  - Implement modify_order method
  - Implement cancel_order method
  - Implement get_order_status method
  - Implement get_pending_orders method
  - Implement calculate_position_size method

## Testing Rules

All tests must be placed in the tests folder. This includes:
- Unit tests for individual components
- Integration tests for testing interactions between components
- End-to-end tests for testing the entire system
- Test fixtures and test utilities

Each test file should follow the naming convention of `test_*.py` to be automatically discovered by test runners.
Test classes should be named `Test*` and test methods should be named `test_*`.